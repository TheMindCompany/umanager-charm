#!/bin/bash

set -eu # -x for verbose logging to juju debug-log

umask 002

install_root=`config-get install_root`
app_name=`config-get app_name`
app_dir="$install_root/$app_name"
app_user=`config-get app_user`
app_scm=`config-get app_scm`
app_url=`config-get app_url`
app_branch=`config-get app_branch`
app_port=`config-get app_port`
node_ver=`config-get node_ver`
node_server=`config-get node_server`
node_dir="/usr/local"
site_dir="$install_root/my-site"

apt-get -y install -qq build-essential libcap2-bin
juju-log "Done Setting up build and launch tools"

if [ ${node_ver} = "" ];then  
  node_dir="/usr"
fi

compress() {
  juju-log "Compressing File " 
  tar -cvzf my-site.tar.gz my-site
}

decompress() { 
  juju-log "Decompressing File "
  tar -xvzf my-site.tar.gz
}

install_node_ppa() {
  juju-log "Installing node.js from PPA..."
  apt-get -y install -qq curl python-software-properties
  add-apt-repository ppa:chris-lea/node.js
  apt-get update
  apt-get -y install -qq nodejs
}

install_node() {
  juju-log "Installing node.js from source..."
  tar -xvzf node-v${node_ver}.tar.gz
  cd node-v${node_ver}
  ./configure
  make
  sudo make install
}

install_chromedriver(){
  juju-log "Installing 64bit chromedriver for linux..."
  apt-get -y install -qq unzip
  cd /opt
  wget -N http://chromedriver.storage.googleapis.com/2.10/chromedriver_linux64.zip -P 
  unzip chromedriver_linux64.zip -d
  chmod +x chromedriver
  mv -f chromedriver /usr/local/share/chromedriver
  sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver
  sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver
}

install_node_check() {
  if [ ${node_ver} != "" ]; then 
    juju-log "Starting node.js install..."
    wget http://nodejs.org/dist/v${node_ver}/node-v${node_ver}.tar.gz
    install_node
  else
    install_node_ppa
  fi
}
[[ -x ${node_dir}/bin/node ]] || install_node_check

install_mongodb() {
  apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10
  echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee /etc/apt/sources.list.d/10gen.list
  apt-get update
  apt-get -y install -qq mongodb-10gen
}
[[ -x /usr/bin/mongo ]] || install_mongodb

default_db_values() {
  juju-log "Adding default data..."
  mongo << EOF
use users

db.userauths.insert({user:"admin@my-site.com",password:"pass",user_type:"admin"})

use navigation

db.navigations.insert({title: "Home", location: "#home", nav_home: "home", external: "false", order: "1" })
db.navigations.insert({title: "News", location: "#news", nav_home: "home", external: "false", order: "2" })
db.navigations.insert({title: "Contact", location: "#contact", nav_home: "home", external: "false", order: "3" })
db.navigations.insert({title: "Home", location: "/", nav_home: "return", external: "true", order: "1" })
db.navigations.insert({title: "Contact", location: "/#contact", nav_home: "return", external: "true", order: "2" })
db.navigations.insert({title: "Notes", location: "#blog", nav_home: "admin_panel", external: "false", order: "1" })
db.navigations.insert({title: "Test", location: "#tuts", nav_home: "admin_panel", external: "false", order: "2" })
db.navigations.insert({title: "Development", location: "#labs", nav_home: "admin_panel", external: "false", order: "3" })
db.navigations.insert({title: "Users", location: "#users", nav_home: "admin_panel", external: "false", order: "4" })
EOF
}

setup_site() {
  install_chromedriver # For special test-case application use!!

  juju-log "Setting up my-site..."
  if [ ${app_scm} != "local" ];then
    juju-log "Cloning git repository..."
    apt-get -y install -qq git-core
    git clone ${app_scm} ${site_dir} -b master
  else
    juju-log "Copying my-site directory..."
    cp --recursive $CHARM_DIR/my-site/my-site.tar.gz /opt
    cd /opt
    decompress
    cd -
  fi

  chown -Rf ubuntu.ubuntu ${site_dir}

  if [ -f ${site_dir}/package.json ]; then
    juju-log "NPM installing my-site dependecies..."
    cd ${site_dir} && sudo npm install
  fi

  cat > /etc/init/my-site.conf <<EOS
description "my-site server"
 
start on (net-device-up
          and local-filesystems
          and runlevel [2345])
stop on runlevel [!2345]

expect fork
respawn
 
script
  export HOME=/
  export NODE_PATH=${node_dir}/lib/node_modules
  exec ${node_dir}/bin/node ${site_dir}/${node_server} >> /var/log/my-site.log 2>&1 &
end script
EOS
}
[[ -d ${site_dir} ]] || setup_site

#default_db_values

open-port 80/TCP
open-port 443/TCP

setcap 'cap_net_bind_service=+ep' ${node_dir}/bin/node
